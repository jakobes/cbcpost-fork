#!/usr/bin/env python

# Copyright (C) 2010-2014 Simula Research Laboratory
#
# This file is part of CBCPOST.
#
# CBCPOST is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CBCPOST is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with CBCPOST. If not, see <http://www.gnu.org/licenses/>.

"""
Executable for running a case
"""

def usage(params, reason=None):
    print "\nUsage: \n"
    print "\tcbcbatch [options] [batch_arguments] runnable"
    print "\nValid options are: \n"
    print params
    print
    print "Note that the runnable must be a python file using cbcpost postprocessing,"
    print "and that set_parse_command_line_arguments(True) is set."
    print
    print "Batch arguments should be specified as lists of parameters, such as:"
    print
    print "\tcbcbatch casedir=Reults N=[4,8,16,32] dt=[0.1,0.05,0.025] run.py\n"
    if reason is not None:
        print "Failed to start cbcbatch: \n"
        print reason
        print
    exit()

from cbcpost import *
from cbcpost.utils import *
from dolfin import set_log_level
set_log_level(0)
import subprocess
import os, sys
from itertools import product
from collections import Iterable
from IPython import embed
import time
import signal

processes = []
return_codes = {}
import atexit

@atexit.register
def kill_subprocesses():
    for pro in processes:
        print "killing..."
        os.killpg(os.getpgid(pro.pid), signal.SIGTERM)  

def num_running(processes):
    N = 0
    for i in reversed(range(len(processes))):
        pro,n = processes[i]
        if pro.poll() is not None:
            cbc_log(40, "Process with PID: %d is completed" %pro.pid)
            return_codes[pro.pid][1] = pro.poll()
            del processes[i]
        else:
            N += n
            cbc_log(30, "Process with PID: %d is running" %pro.pid)
    #N = len(processes)
    cbc_log(25, "Number of running processes is %d" %N)
    print "Number of running processes is %d" %N
    return N

# Parse default params
batch_params = ParamDict(
    num_cores=1,
    casedir="BatchResults",
    mpirun=None,
    mpirun_parameter=None,
)

if len(sys.argv) <= 1:
    usage(batch_params)
elif sys.argv[-1] in ["--help", "-h", "--usage"]:
    usage(batch_params)

# Find runnable file
runnable = sys.argv[1]
assert os.path.isfile(runnable), usage(batch_params, "Unable to find file %s" %runnable)
assert os.path.splitext(runnable)[1] == ".py", usage(batch_params, "Runnable file should be a python file")


batch_params.parse_args(sys.argv[2:])

# Parse other params (remove params reserved for batch_params)
args = ParamDict()
args.parse_args(sys.argv[2:], insert=True)
additional_args = ParamDict()
for k,v in args.items():
    if k in batch_params:
        args.pop(k)
    elif not isinstance(v, Iterable) or isinstance(v, str):
        args.pop(k)
        additional_args[k] = v

all_params = ParamDict()
all_params["BatchParams"] = batch_params
all_params["Params"] = args

if len(all_params) == 0:
    usage(batch_params, "No parameters to ruyn batch run on found.")


if batch_params.mpirun is not None:
    assert max(batch_params.mpirun) <= batch_params.num_cores, "Need to use more cores than the max number of processes for mpirun: num_cores=%d, max cores for mpirun=%d" %(batch_params.num_cores, max(batch_params.mpirun))
    assert batch_params.mpirun_parameter is not None
    assert batch_params.mpirun_parameter in args
    assert len(batch_params.mpirun) == len(args[batch_params.mpirun_parameter])
    mpi_distribution = dict()
    for cores, v in zip(batch_params.mpirun, args[batch_params.mpirun_parameter]):
        mpi_distribution[v] = cores

# Compute all combinations
keys, values = zip(*args.items())
combinations = list(product(*values))

pp = PostProcessor(dict(casedir=batch_params.casedir))
pp.store_params(all_params)

cbc_print("Number of combinations is: %d" %len(combinations))

@atexit.register
def write_log():
    # Write to casedir that combinations are completed
    completed = os.path.join(pp.get_casedir(), "COMPLETED")
    with open(completed, 'w') as f:
        print time.asctime()
        f.write("Completed batch run at: "+time.asctime()+"\n")
        N = sum(r==0 for pd, r in return_codes.values())
        f.write("\n\nSuccessful simulations (%d/%d):\n" %(N,len(combinations)))
        for pd, r in return_codes.values():
            if r == 0:
                f.write(str(pd)+"\n")
        
        f.write("\n\nUnsuccessful simulations (%d/%d):\n" %(len(combinations)-N,len(combinations)))
        for pd, r in return_codes.values():
            if r != 0:
                f.write(str(pd)+"\n")


started = os.path.join(pp.get_casedir(), "STARTED")
with open(started, 'w') as f:
    print time.asctime()
    f.write("Started batch run at: "+time.asctime()+"\n")


#outputs = ParamDict()
# Run all combinations
for i, combination in enumerate(combinations):
    pd = ParamDict(zip(keys, combination))
    cmd_args = pd.render_args()
    casedir = batch_params.casedir+"_"+cmd_args.replace(" ", "_")
    casedir = casedir.replace('=',"")
    #print casedir
    pd.update(casedir=os.path.join(batch_params.casedir, casedir))
    cmd_args = pd.render_args()

    
    cmd = "python %s %s %s" %(runnable, cmd_args, additional_args.render_args())
    
    cbc_print("Starting combination %d/%d (%s) with arguments:" %(i+1, len(combinations), runnable))
    cbc_log(40, str(pd))
    #pro = subprocess.Popen(cmd, shell=True)
    #output_file = cmd_args.replace(" ", "_")
    
    if batch_params.mpirun is not None:
        key = pd[batch_params.mpirun_parameter]
        N = mpi_distribution[key]
        cmd = "mpirun -n %d --bind-to None " %N+cmd
    else:
        N = 1
    while num_running(processes)+N-1 >= batch_params.num_cores:
        time.sleep(0.5)
    outputfile = pd.casedir+".log"
    f = open(outputfile, 'w')
    pro = subprocess.Popen(cmd, shell=True, stdout=f, stderr=subprocess.STDOUT)#), stdout=subprocess.PIPE)
    
    processes.append((pro,N))
    return_codes[pro.pid] =[pd, None]
    cbc_log(30, "Started process with PID: %d" %os.getpgid(pro.pid))

while num_running(processes) > 0:
    time.sleep(1)
